// Copyright (C) SomaSim LLC. 
// Open source software. Please see LICENSE file for details.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace SomaSim.Util
{
    /// <summary>
    /// HashSet pool in a disposable wrapper, so that it can be called as follows:
    /// <pre>
    ///   using (var set = HashSetPool[int].Allocate()) { ... use the list ... }
    /// </pre>
    /// </summary>
    public class HashSetPool<T>
    {
        // static instance and initialization

        public static readonly int MAX_SIZE = 500;
        public static HashSetPool<T> Instance { get; private set; }
        static HashSetPool () { Reset(); }

        public static PooledHashSet Allocate () => Instance._pool.Allocate();

        public static void Free (PooledHashSet element) => Instance._pool.Free(element);

        public static void Reset () {
            Instance?.Release();
            Instance = new HashSetPool<T>();
            Instance.Initialize();
        }

        // actual functionality

        private ObjectPoolResettable<PooledHashSet> _pool;

        public void Initialize () {
            _pool = new ObjectPoolResettable<PooledHashSet>();
            _pool.Initialize(
                () => new PooledHashSet(this),    // factory
                set => {                   // set initialize
                    Logger.AssertInEditor(set.Count == 0, "Non-empty pooled set? Someone held on to it for too long!");
                    if (set.Count > 0) { set.Clear(); }
                },
                set => {                   // set reset
                    bool oversized = set.Count > MAX_SIZE;
                    set.Clear();
                    if (oversized) { set.TrimExcess(); }
                },
                set => {                   // set destroy
                    Logger.AssertInEditor(set.Count == 0, "Destroying a non-empty pooled set? Someone held on to it for too long!");
                }
            );
        }

        public void Release () => _pool.Release();

        // lists generated by this pool

        [DebuggerDisplay("{DebugString}")]
        [DebuggerTypeProxy(typeof(HashSetPool<>.PooledHashSetDebugView))]
        public class PooledHashSet : HashSet<T>, IDisposable
        {
            private static int _gensym = 1;

            private int _id;
            private HashSetPool<T> _parent;

            internal PooledHashSet (HashSetPool<T> parent) {
                _parent = parent;
                _id = _gensym++;
            }

            public void Dispose () => _parent._pool.Free(this);

            private string DebugString => $"PooledHashSet #{_id}: {Count} elements of type {typeof(T).Name}";
        }

        // debug view

        private class PooledHashSetDebugView
        {
            private HashSet<T> _source;

            public PooledHashSetDebugView (HashSet<T> source) => _source = source;

            [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
            public T[] Entries => _source.ToArray();
        }
    }
}
